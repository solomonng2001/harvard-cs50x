sort1 uses: Bubble Sort

How do you know?:
1.  Time taken to sort sorted5000 is 0.011s, and is much less than time taken to sort reversed5000 which took 0.096s, therefore must be bubble sort, where Ω(n) is less than O(n^2). Merge sort and selection sort on the other hand, both have equal O and Ω.
2.  Time taken for random5000 varies greatly each time, obtaining different values of 0.058s and 0.144s upon running program twice.
3.  Linear increase in time taken from 0.011s to 0.110s and to 4.738s, for sorted5000, sorted10000 and sorted50000 respectively, demonstrating that run time likely Ω(n).

sort2 uses: Merge Sort

How do you know?:
1.  Time taken to sort sorted5000 is 0.010s, and is similar to time taken to sort reversed5000 which is 0.014s.
2.  And time taken to sort is generally the fastest, considering sorted, random (random5000 took 0.010s) and reversed lists.
3.  Minimal and non linear increase in time taken from 0.010s to 0.036s and to 4.151s, for sorted5000, sorted10000 and sorted50000 respectively, demonstrating that run time is likely Ω(n log n).

sort3 uses: Selection Sort

How do you know?:
1.  Time taken to sort sorted5000 is 0.034s, and is simmilar to time taken to sort reversed5000 which is 0.032s.
2.  And time taken to sort sortedo5000 is slowest at 0.034s (merge or bubble sort have Ω(n) and Ω(n log n) respectively, compare to selection sort's much slower Ω(n^2)).
3.  Huge increase in time taken to sort from 0.034s to 4.739s and to 11.088s at an, for sorted5000, sorted10000 and sorted50000 respectively, demonstrating that run time is likely Ω(n^2).